# arguments
platform = linux/x64



# paths home
project_home       = ..
bin_dir            = $(project_home)/lib/$(platform)
object_dir         = $(project_home)/.objs



# includes of boost headers
boost_inc_path     = /usr/local/include/boost_1_67_0
boost_includes     = -I$(boost_inc_path)

# includes of boost_net headers
boost_net_inc_path = $(project_home)/inc
boost_net_includes = -I$(boost_net_inc_path)

# all includes that boost_net solution needs
includes           = $(boost_includes)
includes          += $(boost_net_includes)



# source files of boost_net project
boost_net_src_path = $(project_home)/src
boost_net_source   = $(filter %.cpp, $(shell find $(boost_net_src_path) -depth -name "*.cpp"))



# objects of boost_net solution
boost_net_objects  = $(boost_net_source:$(project_home)%.cpp=$(object_dir)%.o)



# output librarys
output_lib         = $(bin_dir)/libboost_net.a



# my g++ not support nullptr and 64bits
# so no -m64, and add a macro -Dnullptr=0

# build flags for objects
build_obj_flags    = -std=c++11 -g -Wall -O1 -pipe -fPIC

# build flags for execution
build_exec_flags   = $(build_obj_flags)

# build flags for dynamic link librarys
build_so_flags     = -std=c++11 -shared

# build flags for static link librarys
build_a_flags      = -rv



# build targets
targets            = boost_net

# let 'build' be default target, build all targets
build     : $(targets)

boost_net : $(boost_net_objects)
	@echo
	@echo "@@@@@  start making boost_net  @@@@@"
	ar $(build_a_flags) $(output_lib) $^
	@echo "@@@@@  make boost_net success  @@@@@"
	@echo

# build all objects
$(object_dir)/%.o:$(project_home)/%.cpp
	@dir=`dirname $@`;      \
    if [ ! -d $$dir ]; then \
        mkdir -p $$dir;     \
    fi
	g++ -c $(build_obj_flags) $(includes) -o $@ $<

clean     :
	rm -rf $(object_dir) $(output_lib)

rebuild   : clean build
